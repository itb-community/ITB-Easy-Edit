
local Squad = Class.inherit(IndexedEntry)
Squad._debugName = "Squad"
Squad._entryType = "squads"

function Squad:new(id, base)
	IndexedEntry.new(self, id, base)
	self._default.name = "Unnamed Squad"
	self._default.mechs = {}
end

function Squad:addMech(mech)
	Assert.Equals('string', type(mech), "Argument #1")

	table.insert(self.mechs, mech)
end

function Squad:getCategories()
	return { Mechs = self.mechs }
end

function Squad:getObject(unitId)
	return easyEdit.units:get(unitId)
end

function Squad:getContentType()
	return easyEdit.units
end

function Squad:isInvalid()
	return #self.mechs ~= 3
end

local Squads = IndexedList(Squad)

function Squads:update()
	if modApi.mod_squads_by_id == nil then
		return
	end

	local function unregisterSquad(squad_id)
		local squad = modApi.mod_squads_by_id[squad_id]
		if squad then
			local index_of_squad = list_indexof(modApi.mod_squads, squad)
			if index_of_squad ~= -1 then
				modApi.mod_squads_by_id[squad_id] = nil
				table.remove(modApi.mod_squads, index_of_squad)
				table.remove(modApi.squad_text, index_of_squad * 2 - 1)
				table.remove(modApi.squad_text, index_of_squad * 2 - 1)
				table.remove(modApi.squad_icon, index_of_squad)
			else
				LOGW("Unexpected issue when attempting to unregister squad")
			end
		end
	end

	local function defaultVanillaSquad(squad_id)
		local livedata_squad = easyEdit.squads:get(squad_id)
		local squad = modApi.mod_squads_by_id[squad_id]
		squad[2] = livedata_squad._default.mechs[1]
		squad[3] = livedata_squad._default.mechs[2]
		squad[4] = livedata_squad._default.mechs[3]
	end

	local savedata_squads = easyEdit.savedata.cache.squads or {}
	local livedata_squads = easyEdit.squads._children
	local deleted_squads = {}

	-- Ensure every cached entry has a live entry.
	for squad_id, savedata_squad in pairs(savedata_squads) do
		local livedata_squad = livedata_squads[squad_id]

		if livedata_squad == nil then
			livedata_squad = easyEdit.squads:add(squad_id)
			livedata_squad:lock()
			livedata_squad:copy(savedata_squad)
		end
	end

	for squad_id, livedata_squad in pairs(livedata_squads) do
		local savedata_squad = savedata_squads[squad_id]
		local squad = modApi.mod_squads_by_id[squad_id]

		if savedata_squad == nil then
			if livedata_squad:isCustom() then
				-- Delete custom squads without savedata
				table.insert(deleted_squads, squad_id)
				unregisterSquad(squad_id)
			else
				-- Reset non-custom squads without savedata
				livedata_squad:reset()
				squad[2] = livedata_squad.mechs[1]
				squad[3] = livedata_squad.mechs[2]
				squad[4] = livedata_squad.mechs[3]
			end
		else
			-- Update squads with savedata
			livedata_squad:reset()
			livedata_squad:copy(savedata_squad)

			if livedata_squad:isInvalid() then
				if livedata_squad:isCustom() then
					unregisterSquad(squad_id)
				else
					defaultVanillaSquad(squad_id)
				end
			else
				-- Create new squad or copy data to existing squad
				if squad == nil then
					local desc = "Custom squad generated by Easy Edit"
					local icon = "resources/mods/squads/unknown.png"
					squad = {
						livedata_squad.name,
						livedata_squad.mechs[1],
						livedata_squad.mechs[2],
						livedata_squad.mechs[3],
						id = squad_id,
					}
					modApi:addSquad(squad, livedata_squad.name, desc, icon)
				else
					squad[2] = livedata_squad.mechs[1]
					squad[3] = livedata_squad.mechs[2]
					squad[4] = livedata_squad.mechs[3]
				end
			end
		end

		for _, squad_id in ipairs(deleted_squads) do
			local livedata_squad = livedata_squads[squad_id]
			livedata_squad:delete()
		end
	end
end


easyEdit.squads = Squads
